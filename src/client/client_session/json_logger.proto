/* 
 * This file is where the request and response messages for the
 * JsonLogger service are defined. It includes the service definition, request and response
 * messages, and enumerations for session initialization behavior.

 * The JsonLogger service provides methods to open a file for logging, log measurement
 * data, and close the file handle of a session.

 * The user can create a similar file for their services by following the structure of this file.
 * It is recommended to have Initialize or similar rpc call 
 * establishing or creating or opening the connection objects and 
 * Close or similar rpc calls for closing or destroying the connection objects.

 * We use InitializeFile and CloseFile as examples here.
 * It is highly recommended to use the same Session Initialization Behavior ENUM.
 * This ensures that the sessions are shareable across different measurement plugins.
 */

syntax = "proto3";

package json_logger;

import "google/protobuf/timestamp.proto";

service JsonLogger {
  // Initializes the given JSON file for logging.
  // Status Codes for errors:
  // - INVALID_ARGUMENT: Invalid JSON File or Invalid Session Initialization Behavior.
  // - PERMISSION_DENIED: Permission denied for the File.
  // - INTERNAL: File path is invalid or inaccessible or any other unexpected behavior.
  // - ALREADY_EXISTS: File has already been initialized and cannot be initialized again for SESSION_INITIALIZATION_BEHAVIOR_INITIALIZE_NEW.
  // - NOT_FOUND: Session does not exist for SESSION_INITIALIZATION_BEHAVIOR_ATTACH_TO_EXISTING.
  rpc InitializeFile(InitializeFileRequest) returns (InitializeFileResponse);

  // Logs measurement data to the file of the session.
  // Status Codes for errors:
  // - PERMISSION_DENIED: Permission denied for the File.
  // - NOT_FOUND: Session does not exist.
  // - INTERNAL: File path is invalid or inaccessible or any other unexpected behavior.
  rpc LogMeasurementData(LogMeasurementDataRequest) returns (LogMeasurementDataResponse);

  // Closes the file handle of the session.
  // Status Codes for errors:
  // - NOT_FOUND: Session does not exist.
  // - INTERNAL: Any unexpected behavior.
  rpc CloseFile(CloseFileRequest) returns (CloseFileResponse);
}

message InitializeFileRequest {
  // The complete file path.
  string file_path = 1;
  // Defines how the session should be initialized.
  SessionInitializationBehavior initialization_behavior = 2;
}

message InitializeFileResponse {
  string session_name = 1;
  bool new_session = 2;
}

message LogMeasurementDataRequest{
  string session_name = 1;
  string measurement_name = 2;
  google.protobuf.Timestamp timestamp = 3;
  map<string, string> measurement_configurations = 4;
  map<string, string> measurement_outputs=5;
}

// Empty response message; success is indicated by the gRPC status code.
message LogMeasurementDataResponse {
}

message CloseFileRequest {
  string session_name = 1;
}

message CloseFileResponse {
}

enum SessionInitializationBehavior {
  // Automatically decide whether to initialize new or attach.
  SESSION_INITIALIZATION_BEHAVIOR_UNSPECIFIED = 0;
  SESSION_INITIALIZATION_BEHAVIOR_INITIALIZE_NEW = 1;
  SESSION_INITIALIZATION_BEHAVIOR_ATTACH_TO_EXISTING = 2;
}
