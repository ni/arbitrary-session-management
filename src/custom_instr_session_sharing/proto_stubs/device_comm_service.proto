/* 
 * This file is where the request and response messages for the
 * Device Communication service are defined. It includes the service definition, request and response
 * messages, and enumerations for session initialization behavior.

 * The Device Communication service provides methods to open a handle of a session.

 * The user can create a similar file for their services by following the structure of this file.
 * It is recommended to have Initialize or similar rpc call 
 * establishing or creating or opening the connection objects and 
 * Close or similar rpc calls for closing or destroying the connection objects.

 * We use Initialize and Close as examples here.
 * It is highly recommended to use the same Session Initialization Behavior ENUM.
 * This ensures that the sessions are shareable across different measurement plugins.
 */

syntax = "proto3";

package DeviceCommunication;

// Protocol enumeration for device communication
enum Protocol {
    UNKNOWN_PROTOCOL = 0;
    SPI = 1;
    I2C = 2;
    UART = 3;
}

// Service definition for device communication
service DeviceCommunication {

    // Initializes the device communication session for DUT validation.
    // Status Codes for errors:
    // - INVALID_ARGUMENT: Invalid arguments for Device id, Protocol, Register map path, reset or Invalid Session Initialization Behavior.
    // - PERMISSION_DENIED: Permission denied for the register map path.
    // - INTERNAL: Register Map path is invalid or inaccessible or any other unexpected behavior.
    // - ALREADY_EXISTS: Device Session has already been initialized and cannot be initialized again for SESSION_INITIALIZATION_BEHAVIOR_INITIALIZE_NEW.
    // - NOT_FOUND: Session does not exist for SESSION_INITIALIZATION_BEHAVIOR_ATTACH_TO_EXISTING.
    rpc Initialize (InitializeRequest) returns (InitializeResponse) {}

    // Writes a value to a specified register on the DUT.
    // Status Codes for errors:
    // NOT_FOUND: Session does not exist.
    // INVALID_ARGUMENT: Invalid arguments for Register name
    // INTERNAL: Unexpected internal error.
    rpc WriteRegister (WriteRegisterRequest) returns (StatusResponse) {}

    // Reads a value from a specified register on the DUT.
    // Status Codes for errors:
    // NOT_FOUND: Session does not exist.
    // INVALID_ARGUMENT: Invalid arguments for Register name
    // INTERNAL: Unexpected internal error.
    rpc ReadRegister (ReadRegisterRequest) returns (ReadRegisterResponse) {}

    // Writes a value to a specific GPIO channel
    // Status Codes for errors:
    // NOT_FOUND: Session does not exist.
    // INVALID_ARGUMENT: Invalid arguments for GPIO channel, state
    // INTERNAL: Unexpected internal error.
    rpc WriteGpioChannel (WriteGpioChannelRequest) returns (StatusResponse) {}

    // Reads the value of a specific GPIO channel
    // Status Codes for errors:
    // NOT_FOUND: Session does not exist.
    // INVALID_ARGUMENT: Invalid arguments for GPIO channel
    // INTERNAL: Unexpected internal error.
    rpc ReadGpioChannel (ReadGpioChannelRequest) returns (ReadGpioChannelResponse) {}

    // Writes a value to an entire GPIO port.
    // Status Codes for errors:
    // NOT_FOUND: Session does not exist.
    // INVALID_ARGUMENT: Invalid arguments for GPIO Port, State, Mask.
    // INTERNAL: Unexpected internal error.
    rpc WriteGpioPort (WriteGpioPortRequest) returns (StatusResponse) {}

    // Reads the value of an entire GPIO port.
    // Status Codes for errors:
    // NOT_FOUND: Session does not exist.
    // INVALID_ARGUMENT: Invalid arguments for GPIO Port, Mask.
    // INTERNAL: Unexpected internal error.
    rpc ReadGpioPort (ReadGpioPortRequest) returns (ReadGpioPortResponse) {}

    // Closes the device handle of the session.
    // Status Codes for errors:
    // NOT_FOUND: Session does not exist.
    // INTERNAL: Unexpected internal error.
    rpc Close (CloseRequest) returns (StatusResponse) {}
}

// Request/Response messages

message InitializeRequest {
    // Resource name of the custom instrument.
    string instrument_resource_name = 1;
    // Defines which protocol is used for device wake up.
    Protocol protocol = 2;
    // Reset option to re-load the register map data
    bool reset = 3;
    // The complete register map file path
    string register_map_path = 4;
    // Defines how the session should be initialized.
    SessionInitializationBehavior initialization_behavior = 5;
}


message InitializeResponse{
    string session_name = 1;
    bool new_session = 2;

}

message WriteRegisterRequest {
    string session_name = 1;
    string register_name = 2;
    uint32 value = 3;
}

message ReadRegisterRequest {
    string session_name = 1;
    string register_name = 2;
}

message ReadRegisterResponse {
    uint32 value = 1;
}

message WriteGpioChannelRequest {
    string session_name = 1;
    uint32 port = 2;
    uint32 channel = 3;
    bool state = 4;
}

message ReadGpioChannelRequest {
    string session_name = 1;
    uint32 port = 2;
    uint32 channel = 3;
}

message ReadGpioChannelResponse {
    bool state = 1;
}

message WriteGpioPortRequest {
    string session_name = 1;
    uint32 port = 2;
    uint32 mask = 3;
    uint32 state = 4;
}

message ReadGpioPortRequest {
    string session_name = 1;
    uint32 port = 2;
    uint32 mask = 3;
}

message ReadGpioPortResponse {
    uint32 state = 1;
}

message CloseRequest{
    string session_name = 1;

}

// Empty reponse for successful operations, whereas err messages are handled by gRPC objects.
message StatusResponse {
    
}

enum SessionInitializationBehavior {
  // Automatically decide whether to initialize new or attach.
  SESSION_INITIALIZATION_BEHAVIOR_UNSPECIFIED = 0;
  SESSION_INITIALIZATION_BEHAVIOR_INITIALIZE_NEW = 1;
  SESSION_INITIALIZATION_BEHAVIOR_ATTACH_TO_EXISTING = 2;
}