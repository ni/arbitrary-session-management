"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import device_comm_service_pb2
import grpc
import grpc.aio
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class DeviceCommunicationStub:
    """Service definition for device communication"""

    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    Initialize: grpc.UnaryUnaryMultiCallable[
        device_comm_service_pb2.InitializeRequest,
        device_comm_service_pb2.StatusResponse,
    ]

    Close: grpc.UnaryUnaryMultiCallable[
        device_comm_service_pb2.CloseRequest,
        device_comm_service_pb2.StatusResponse,
    ]

    WriteRegister: grpc.UnaryUnaryMultiCallable[
        device_comm_service_pb2.WriteRegisterRequest,
        device_comm_service_pb2.StatusResponse,
    ]

    ReadRegister: grpc.UnaryUnaryMultiCallable[
        device_comm_service_pb2.ReadRegisterRequest,
        device_comm_service_pb2.ReadRegisterResponse,
    ]

    WriteGpioChannel: grpc.UnaryUnaryMultiCallable[
        device_comm_service_pb2.WriteGpioChannelRequest,
        device_comm_service_pb2.StatusResponse,
    ]

    ReadGpioChannel: grpc.UnaryUnaryMultiCallable[
        device_comm_service_pb2.ReadGpioChannelRequest,
        device_comm_service_pb2.ReadGpioChannelResponse,
    ]

    WriteGpioPort: grpc.UnaryUnaryMultiCallable[
        device_comm_service_pb2.WriteGpioPortRequest,
        device_comm_service_pb2.StatusResponse,
    ]

    ReadGpioPort: grpc.UnaryUnaryMultiCallable[
        device_comm_service_pb2.ReadGpioPortRequest,
        device_comm_service_pb2.ReadGpioPortResponse,
    ]

class DeviceCommunicationAsyncStub:
    """Service definition for device communication"""

    Initialize: grpc.aio.UnaryUnaryMultiCallable[
        device_comm_service_pb2.InitializeRequest,
        device_comm_service_pb2.StatusResponse,
    ]

    Close: grpc.aio.UnaryUnaryMultiCallable[
        device_comm_service_pb2.CloseRequest,
        device_comm_service_pb2.StatusResponse,
    ]

    WriteRegister: grpc.aio.UnaryUnaryMultiCallable[
        device_comm_service_pb2.WriteRegisterRequest,
        device_comm_service_pb2.StatusResponse,
    ]

    ReadRegister: grpc.aio.UnaryUnaryMultiCallable[
        device_comm_service_pb2.ReadRegisterRequest,
        device_comm_service_pb2.ReadRegisterResponse,
    ]

    WriteGpioChannel: grpc.aio.UnaryUnaryMultiCallable[
        device_comm_service_pb2.WriteGpioChannelRequest,
        device_comm_service_pb2.StatusResponse,
    ]

    ReadGpioChannel: grpc.aio.UnaryUnaryMultiCallable[
        device_comm_service_pb2.ReadGpioChannelRequest,
        device_comm_service_pb2.ReadGpioChannelResponse,
    ]

    WriteGpioPort: grpc.aio.UnaryUnaryMultiCallable[
        device_comm_service_pb2.WriteGpioPortRequest,
        device_comm_service_pb2.StatusResponse,
    ]

    ReadGpioPort: grpc.aio.UnaryUnaryMultiCallable[
        device_comm_service_pb2.ReadGpioPortRequest,
        device_comm_service_pb2.ReadGpioPortResponse,
    ]

class DeviceCommunicationServicer(metaclass=abc.ABCMeta):
    """Service definition for device communication"""

    @abc.abstractmethod
    def Initialize(
        self,
        request: device_comm_service_pb2.InitializeRequest,
        context: _ServicerContext,
    ) -> typing.Union[device_comm_service_pb2.StatusResponse, collections.abc.Awaitable[device_comm_service_pb2.StatusResponse]]: ...

    @abc.abstractmethod
    def Close(
        self,
        request: device_comm_service_pb2.CloseRequest,
        context: _ServicerContext,
    ) -> typing.Union[device_comm_service_pb2.StatusResponse, collections.abc.Awaitable[device_comm_service_pb2.StatusResponse]]: ...

    @abc.abstractmethod
    def WriteRegister(
        self,
        request: device_comm_service_pb2.WriteRegisterRequest,
        context: _ServicerContext,
    ) -> typing.Union[device_comm_service_pb2.StatusResponse, collections.abc.Awaitable[device_comm_service_pb2.StatusResponse]]: ...

    @abc.abstractmethod
    def ReadRegister(
        self,
        request: device_comm_service_pb2.ReadRegisterRequest,
        context: _ServicerContext,
    ) -> typing.Union[device_comm_service_pb2.ReadRegisterResponse, collections.abc.Awaitable[device_comm_service_pb2.ReadRegisterResponse]]: ...

    @abc.abstractmethod
    def WriteGpioChannel(
        self,
        request: device_comm_service_pb2.WriteGpioChannelRequest,
        context: _ServicerContext,
    ) -> typing.Union[device_comm_service_pb2.StatusResponse, collections.abc.Awaitable[device_comm_service_pb2.StatusResponse]]: ...

    @abc.abstractmethod
    def ReadGpioChannel(
        self,
        request: device_comm_service_pb2.ReadGpioChannelRequest,
        context: _ServicerContext,
    ) -> typing.Union[device_comm_service_pb2.ReadGpioChannelResponse, collections.abc.Awaitable[device_comm_service_pb2.ReadGpioChannelResponse]]: ...

    @abc.abstractmethod
    def WriteGpioPort(
        self,
        request: device_comm_service_pb2.WriteGpioPortRequest,
        context: _ServicerContext,
    ) -> typing.Union[device_comm_service_pb2.StatusResponse, collections.abc.Awaitable[device_comm_service_pb2.StatusResponse]]: ...

    @abc.abstractmethod
    def ReadGpioPort(
        self,
        request: device_comm_service_pb2.ReadGpioPortRequest,
        context: _ServicerContext,
    ) -> typing.Union[device_comm_service_pb2.ReadGpioPortResponse, collections.abc.Awaitable[device_comm_service_pb2.ReadGpioPortResponse]]: ...

def add_DeviceCommunicationServicer_to_server(servicer: DeviceCommunicationServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
