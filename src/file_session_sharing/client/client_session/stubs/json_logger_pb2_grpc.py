# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import client_session.stubs.json_logger_pb2 as json__logger__pb2

GRPC_GENERATED_VERSION = '1.71.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in json_logger_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class JsonLoggerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.InitializeFile = channel.unary_unary(
                '/json_logger.JsonLogger/InitializeFile',
                request_serializer=json__logger__pb2.InitializeFileRequest.SerializeToString,
                response_deserializer=json__logger__pb2.InitializeFileResponse.FromString,
                _registered_method=True)
        self.LogMeasurementData = channel.unary_unary(
                '/json_logger.JsonLogger/LogMeasurementData',
                request_serializer=json__logger__pb2.LogMeasurementDataRequest.SerializeToString,
                response_deserializer=json__logger__pb2.LogMeasurementDataResponse.FromString,
                _registered_method=True)
        self.CloseFile = channel.unary_unary(
                '/json_logger.JsonLogger/CloseFile',
                request_serializer=json__logger__pb2.CloseFileRequest.SerializeToString,
                response_deserializer=json__logger__pb2.CloseFileResponse.FromString,
                _registered_method=True)


class JsonLoggerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def InitializeFile(self, request, context):
        """Initializes the given JSON file for logging.
        Status Codes for errors:
        - INVALID_ARGUMENT: Invalid JSON File or Invalid Session Initialization Behavior.
        - PERMISSION_DENIED: Permission denied for the File.
        - INTERNAL: File path is invalid or inaccessible or any other unexpected behavior.
        - ALREADY_EXISTS: File has already been initialized and cannot be initialized again for SESSION_INITIALIZATION_BEHAVIOR_INITIALIZE_NEW.
        - NOT_FOUND: Session does not exist for SESSION_INITIALIZATION_BEHAVIOR_ATTACH_TO_EXISTING.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LogMeasurementData(self, request, context):
        """Logs measurement data to the file of the session.
        Status Codes for errors:
        - PERMISSION_DENIED: Permission denied for the File.
        - NOT_FOUND: Session does not exist.
        - INTERNAL: File path is invalid or inaccessible or any other unexpected behavior.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CloseFile(self, request, context):
        """Closes the file handle of the session.
        Status Codes for errors:
        - NOT_FOUND: Session does not exist.
        - INTERNAL: Any unexpected behavior.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_JsonLoggerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'InitializeFile': grpc.unary_unary_rpc_method_handler(
                    servicer.InitializeFile,
                    request_deserializer=json__logger__pb2.InitializeFileRequest.FromString,
                    response_serializer=json__logger__pb2.InitializeFileResponse.SerializeToString,
            ),
            'LogMeasurementData': grpc.unary_unary_rpc_method_handler(
                    servicer.LogMeasurementData,
                    request_deserializer=json__logger__pb2.LogMeasurementDataRequest.FromString,
                    response_serializer=json__logger__pb2.LogMeasurementDataResponse.SerializeToString,
            ),
            'CloseFile': grpc.unary_unary_rpc_method_handler(
                    servicer.CloseFile,
                    request_deserializer=json__logger__pb2.CloseFileRequest.FromString,
                    response_serializer=json__logger__pb2.CloseFileResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'json_logger.JsonLogger', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('json_logger.JsonLogger', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class JsonLogger(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def InitializeFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/json_logger.JsonLogger/InitializeFile',
            json__logger__pb2.InitializeFileRequest.SerializeToString,
            json__logger__pb2.InitializeFileResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def LogMeasurementData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/json_logger.JsonLogger/LogMeasurementData',
            json__logger__pb2.LogMeasurementDataRequest.SerializeToString,
            json__logger__pb2.LogMeasurementDataResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CloseFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/json_logger.JsonLogger/CloseFile',
            json__logger__pb2.CloseFileRequest.SerializeToString,
            json__logger__pb2.CloseFileResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
