"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file

This file is where the request and response messages for the
JsonLogger service are defined. It includes the service definition, request and response
messages, and enumerations for session initialization behavior.

The JsonLogger service provides methods to open a file for logging, log measurement
data, and close the file handle of a session.

The user can create a similar file for their services by following the structure of this file.
It is recommended to have Initialize or similar rpc call 
establishing or creating or opening the connection objects and 
Close or similar rpc calls for closing or destroying the connection objects.

We use InitializeFile and CloseFile as examples here.
It is highly recommended to use the same Session Initialization Behavior ENUM.
This ensures that the sessions are shareable across different measurement plugins.
"""

import abc
import collections.abc
import grpc
import grpc.aio
import stubs.json_logger_pb2 as json_logger_pb2
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class JsonLoggerStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    InitializeFile: grpc.UnaryUnaryMultiCallable[
        json_logger_pb2.InitializeFileRequest,
        json_logger_pb2.InitializeFileResponse,
    ]
    """Initializes the given JSON file for logging.
    Status Codes for errors:
    - INVALID_ARGUMENT: Invalid JSON File or Invalid Session Initialization Behavior.
    - PERMISSION_DENIED: Permission denied for the File.
    - INTERNAL: File path is invalid or inaccessible or any other unexpected behavior.
    - ALREADY_EXISTS: File has already been initialized and cannot be initialized again for SESSION_INITIALIZATION_BEHAVIOR_INITIALIZE_NEW.
    - NOT_FOUND: Session does not exist for SESSION_INITIALIZATION_BEHAVIOR_ATTACH_TO_EXISTING.
    """

    LogMeasurementData: grpc.UnaryUnaryMultiCallable[
        json_logger_pb2.LogMeasurementDataRequest,
        json_logger_pb2.LogMeasurementDataResponse,
    ]
    """Logs measurement data to the file of the session.
    Status Codes for errors:
    - PERMISSION_DENIED: Permission denied for the File.
    - NOT_FOUND: Session does not exist.
    - INTERNAL: File path is invalid or inaccessible or any other unexpected behavior.
    """

    CloseFile: grpc.UnaryUnaryMultiCallable[
        json_logger_pb2.CloseFileRequest,
        json_logger_pb2.CloseFileResponse,
    ]
    """Closes the file handle of the session.
    Status Codes for errors:
    - NOT_FOUND: Session does not exist.
    - INTERNAL: Any unexpected behavior.
    """

class JsonLoggerAsyncStub:
    InitializeFile: grpc.aio.UnaryUnaryMultiCallable[
        json_logger_pb2.InitializeFileRequest,
        json_logger_pb2.InitializeFileResponse,
    ]
    """Initializes the given JSON file for logging.
    Status Codes for errors:
    - INVALID_ARGUMENT: Invalid JSON File or Invalid Session Initialization Behavior.
    - PERMISSION_DENIED: Permission denied for the File.
    - INTERNAL: File path is invalid or inaccessible or any other unexpected behavior.
    - ALREADY_EXISTS: File has already been initialized and cannot be initialized again for SESSION_INITIALIZATION_BEHAVIOR_INITIALIZE_NEW.
    - NOT_FOUND: Session does not exist for SESSION_INITIALIZATION_BEHAVIOR_ATTACH_TO_EXISTING.
    """

    LogMeasurementData: grpc.aio.UnaryUnaryMultiCallable[
        json_logger_pb2.LogMeasurementDataRequest,
        json_logger_pb2.LogMeasurementDataResponse,
    ]
    """Logs measurement data to the file of the session.
    Status Codes for errors:
    - PERMISSION_DENIED: Permission denied for the File.
    - NOT_FOUND: Session does not exist.
    - INTERNAL: File path is invalid or inaccessible or any other unexpected behavior.
    """

    CloseFile: grpc.aio.UnaryUnaryMultiCallable[
        json_logger_pb2.CloseFileRequest,
        json_logger_pb2.CloseFileResponse,
    ]
    """Closes the file handle of the session.
    Status Codes for errors:
    - NOT_FOUND: Session does not exist.
    - INTERNAL: Any unexpected behavior.
    """

class JsonLoggerServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def InitializeFile(
        self,
        request: json_logger_pb2.InitializeFileRequest,
        context: _ServicerContext,
    ) -> typing.Union[json_logger_pb2.InitializeFileResponse, collections.abc.Awaitable[json_logger_pb2.InitializeFileResponse]]:
        """Initializes the given JSON file for logging.
        Status Codes for errors:
        - INVALID_ARGUMENT: Invalid JSON File or Invalid Session Initialization Behavior.
        - PERMISSION_DENIED: Permission denied for the File.
        - INTERNAL: File path is invalid or inaccessible or any other unexpected behavior.
        - ALREADY_EXISTS: File has already been initialized and cannot be initialized again for SESSION_INITIALIZATION_BEHAVIOR_INITIALIZE_NEW.
        - NOT_FOUND: Session does not exist for SESSION_INITIALIZATION_BEHAVIOR_ATTACH_TO_EXISTING.
        """

    @abc.abstractmethod
    def LogMeasurementData(
        self,
        request: json_logger_pb2.LogMeasurementDataRequest,
        context: _ServicerContext,
    ) -> typing.Union[json_logger_pb2.LogMeasurementDataResponse, collections.abc.Awaitable[json_logger_pb2.LogMeasurementDataResponse]]:
        """Logs measurement data to the file of the session.
        Status Codes for errors:
        - PERMISSION_DENIED: Permission denied for the File.
        - NOT_FOUND: Session does not exist.
        - INTERNAL: File path is invalid or inaccessible or any other unexpected behavior.
        """

    @abc.abstractmethod
    def CloseFile(
        self,
        request: json_logger_pb2.CloseFileRequest,
        context: _ServicerContext,
    ) -> typing.Union[json_logger_pb2.CloseFileResponse, collections.abc.Awaitable[json_logger_pb2.CloseFileResponse]]:
        """Closes the file handle of the session.
        Status Codes for errors:
        - NOT_FOUND: Session does not exist.
        - INTERNAL: Any unexpected behavior.
        """

def add_JsonLoggerServicer_to_server(servicer: JsonLoggerServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
