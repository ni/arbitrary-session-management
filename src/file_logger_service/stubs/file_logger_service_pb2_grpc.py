# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import file_logger_service.stubs.file_logger_service_pb2 as file__logger__service__pb2


class FileLoggerServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.InitializeFile = channel.unary_unary(
                '/file_logger_service.FileLoggerService/InitializeFile',
                request_serializer=file__logger__service__pb2.InitializeFileRequest.SerializeToString,
                response_deserializer=file__logger__service__pb2.InitializeFileResponse.FromString,
                )
        self.LogData = channel.unary_unary(
                '/file_logger_service.FileLoggerService/LogData',
                request_serializer=file__logger__service__pb2.LogDataRequest.SerializeToString,
                response_deserializer=file__logger__service__pb2.LogDataResponse.FromString,
                )
        self.CloseFile = channel.unary_unary(
                '/file_logger_service.FileLoggerService/CloseFile',
                request_serializer=file__logger__service__pb2.CloseFileRequest.SerializeToString,
                response_deserializer=file__logger__service__pb2.CloseFileResponse.FromString,
                )


class FileLoggerServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def InitializeFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LogData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CloseFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FileLoggerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'InitializeFile': grpc.unary_unary_rpc_method_handler(
                    servicer.InitializeFile,
                    request_deserializer=file__logger__service__pb2.InitializeFileRequest.FromString,
                    response_serializer=file__logger__service__pb2.InitializeFileResponse.SerializeToString,
            ),
            'LogData': grpc.unary_unary_rpc_method_handler(
                    servicer.LogData,
                    request_deserializer=file__logger__service__pb2.LogDataRequest.FromString,
                    response_serializer=file__logger__service__pb2.LogDataResponse.SerializeToString,
            ),
            'CloseFile': grpc.unary_unary_rpc_method_handler(
                    servicer.CloseFile,
                    request_deserializer=file__logger__service__pb2.CloseFileRequest.FromString,
                    response_serializer=file__logger__service__pb2.CloseFileResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'file_logger_service.FileLoggerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class FileLoggerService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def InitializeFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/file_logger_service.FileLoggerService/InitializeFile',
            file__logger__service__pb2.InitializeFileRequest.SerializeToString,
            file__logger__service__pb2.InitializeFileResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LogData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/file_logger_service.FileLoggerService/LogData',
            file__logger__service__pb2.LogDataRequest.SerializeToString,
            file__logger__service__pb2.LogDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CloseFile(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/file_logger_service.FileLoggerService/CloseFile',
            file__logger__service__pb2.CloseFileRequest.SerializeToString,
            file__logger__service__pb2.CloseFileResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
