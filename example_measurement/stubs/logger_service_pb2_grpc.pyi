"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""

import abc
import collections.abc
import grpc
import grpc.aio
import stubs.logger_service_pb2 as logger_service_pb2
import typing

_T = typing.TypeVar("_T")

class _MaybeAsyncIterator(collections.abc.AsyncIterator[_T], collections.abc.Iterator[_T], metaclass=abc.ABCMeta): ...

class _ServicerContext(grpc.ServicerContext, grpc.aio.ServicerContext):  # type: ignore[misc, type-arg]
    ...

class logger_serviceStub:
    def __init__(self, channel: typing.Union[grpc.Channel, grpc.aio.Channel]) -> None: ...
    InitializeFile: grpc.UnaryUnaryMultiCallable[
        logger_service_pb2.InitializeFileRequest,
        logger_service_pb2.InitializeFileResponse,
    ]

    LogData: grpc.UnaryUnaryMultiCallable[
        logger_service_pb2.LogDataRequest,
        logger_service_pb2.LogDataResponse,
    ]

    CloseFile: grpc.UnaryUnaryMultiCallable[
        logger_service_pb2.CloseFileRequest,
        logger_service_pb2.CloseFileResponse,
    ]

class logger_serviceAsyncStub:
    InitializeFile: grpc.aio.UnaryUnaryMultiCallable[
        logger_service_pb2.InitializeFileRequest,
        logger_service_pb2.InitializeFileResponse,
    ]

    LogData: grpc.aio.UnaryUnaryMultiCallable[
        logger_service_pb2.LogDataRequest,
        logger_service_pb2.LogDataResponse,
    ]

    CloseFile: grpc.aio.UnaryUnaryMultiCallable[
        logger_service_pb2.CloseFileRequest,
        logger_service_pb2.CloseFileResponse,
    ]

class logger_serviceServicer(metaclass=abc.ABCMeta):
    @abc.abstractmethod
    def InitializeFile(
        self,
        request: logger_service_pb2.InitializeFileRequest,
        context: _ServicerContext,
    ) -> typing.Union[logger_service_pb2.InitializeFileResponse, collections.abc.Awaitable[logger_service_pb2.InitializeFileResponse]]: ...

    @abc.abstractmethod
    def LogData(
        self,
        request: logger_service_pb2.LogDataRequest,
        context: _ServicerContext,
    ) -> typing.Union[logger_service_pb2.LogDataResponse, collections.abc.Awaitable[logger_service_pb2.LogDataResponse]]: ...

    @abc.abstractmethod
    def CloseFile(
        self,
        request: logger_service_pb2.CloseFileRequest,
        context: _ServicerContext,
    ) -> typing.Union[logger_service_pb2.CloseFileResponse, collections.abc.Awaitable[logger_service_pb2.CloseFileResponse]]: ...

def add_logger_serviceServicer_to_server(servicer: logger_serviceServicer, server: typing.Union[grpc.Server, grpc.aio.Server]) -> None: ...
